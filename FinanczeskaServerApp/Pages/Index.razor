@page "/"
@using Data;
@using FinanczeskaServerApp.Services;
@inject JsonDataSerializer _jsonDataSerializer;
@inject ChatService _chatService;
@inject ModelCallerService _modelCallerService;
@inject IHttpContextAccessor _httpContextAccessor;

<body>
  <div class="container">
    <div class="row">


      <section class="discussions">
        <div class="discussion search">

        </div>


        <div>
            <button id="CreateNewChat" @onclick="OnCreateNewChatClick"  >create New Chat</button>
        </div>

        @if(chats!= null){
            @foreach (var item in chats)
            {
                <div class="discussion message-active" @onclick="( async () => { await OnClickChangeChat(item);} )">
                    <div class="desc-contact">

                        <p class="name"> Session : @item.Name</p>
                    </div>
                    <div class="timer"> Date : @DateTime.Now.ToString("yyyy.MM.dd") </div>
                </div>
            }
        }



      </section>
      <section class="chat" >

        <div class="messages-chat">
                    @if (messages.Count == 0)
                    {
                        <div class="message, text">
                            <p >Prosze wybrać bota, z którym mozna prowadzić rozmowe na temat finansowy albo statystyczny: </p>
                            <p >Wiek bezrobotnych w 2022 roku </p>
                            <button style="border-radius: 10px 10px 10px 10px;" id="chatSubmit" @onclick="( async () => { await OnClickChangeData(1);} )"></button>
                            <p >Statystyka pozyskane miejsca pracy w 2022 roku </p>
                            <button style="border-radius: 10px 10px 10px 10px;" id="chatSubmit" @onclick="( async () => { await OnClickChangeData(2);} )"></button>
                            <p >Bezrobocie wśród niepełnosprawnych </p>
                            <button style="border-radius: 10px 10px 10px 10px;" id="chatSubmit" @onclick="( async () => { await OnClickChangeData(3);} )"></button>
                            <p >Powierzenie pracy cudzoziemcom </p>
                            <button style="border-radius: 10px 10px 10px 10px;" id="chatSubmit" @onclick="( async () => { await OnClickChangeData(4);} )"></button>
                            <p >Pomoc Kryzysowa - Źródła Pomocy </p>
                            <button style="border-radius: 10px 10px 10px 10px;" id="chatSubmit" @onclick="( async () => { await OnClickChangeData(5);} )"></button>
                            <p >Ewidencja bezrobotnych za 2022 rok </p>
                            <button style="border-radius: 10px 10px 10px 10px;" id="chatSubmit" @onclick="( async () => { await OnClickChangeData(6);} )"></button>
                        </div> 
                    }
                    else
                    {
                        <p>Wybrany zostal bot </p>
                    }

            @foreach (var message in messages)
            {
                @if (message.IsRequest)
                {
                    <div class="message">
                        <p class="text">@message.Text</p>
                    </div>
                }
                else
                {
                    <div class="message text-only">
                        <div class="response">
                            <p class="text">@message.Text</p>
                        </div>
                    </div>
                }

            }

        </div>
        <div class="footer-chat">
          <input id="textImput" type="text" class="write-message" placeholder="Type your message here" @bind="text"/>
                    <button id="chatSubmit" @onclick="Submit" >
                        Submit
                    </button>
        </div>
      </section>
    </div>
  </div>
</body>


@code {
    string currentConversation;
    bool firstRender;
    private string text = "";
    List<Chat> chats;
    List<Message> messages = new List<Message>() 
    { 
        // new Message(DateTime.Now, "Test1", true), 
        // new Message(DateTime.Now, "Test2", false), 
        // new Message(DateTime.Now, "Test2", true) 
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP.Equals("::1"))
                clientIP = "localhost";
            chats = _chatService.GetUserChatList(clientIP);

            if (chats.Count > 0)
            {
                Chat defaultChat = chats.First();

                messages = _chatService.GetChatHistory(clientIP, defaultChat);
            }

            StateHasChanged();

        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task OnClickChangeData(int idOfDataFile)
    {
        try
        {
            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP.Equals("::1"))
                clientIP = "localhost";



            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task OnClickChangeChat(string name)
    protected async Task OnClickChangeChat(Chat chat)
    {
        try
        {
            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP.Equals("::1"))
                clientIP = "localhost";

            messages = _chatService.GetChatHistory(clientIP, chat);

            currentConversation = chat.Name;
            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    /// <summary>
    /// Create chat
    /// </summary>
    public async void OnCreateNewChatClick()
    {
        try
        {
            Guid guid = Guid.NewGuid();
            Chat Newchat = new Chat(guid.ToString(), DateOnly.FromDateTime(DateTime.Now.Date));
            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP == null)
                return;

            // await OnClickChangeChat(Newchat);
            
            // create Chat
            await _chatService.CreateNewChat(clientIP);

            // REfresz chat list
            chats = _chatService.GetUserChatList(clientIP);
            StateHasChanged();
        }
        catch(Exception ex)
        {
            
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        try
        {
            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP == null)
                return;
            if (clientIP.Equals("::1"))
                clientIP = "localhost";
            chats = _chatService.GetUserChatList(clientIP);

            // execute conditionally for loading data, otherwise this will load
            // every time the page refreshes
            if (firstRender)
            {
                // Do work to load page data and set properties
            }
            StateHasChanged();
        }
        catch(Exception ex)
        {

        }

    }

    private async Task Submit()
    {
        string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
        if (clientIP == null)
            clientIP = "undefinded";


        Message message = new Message(DateTime.Now, text, true);
        bool humanResponseSaveResult = _jsonDataSerializer.SerializeToJson(clientIP,currentConversation, message);
        messages.Add(message);

        string resonse = await _modelCallerService.AskModel(clientIP, text);
        Message botResponseMessage = new Message(DateTime.Now, resonse, false);
        bool botResponseSaveResult = _jsonDataSerializer.SerializeToJson(clientIP,currentConversation, botResponseMessage);
        messages.Add(botResponseMessage);


        StateHasChanged();
    }

}