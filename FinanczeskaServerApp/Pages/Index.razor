@page "/"
@using Data;
@using FinanczeskaServerApp.Services;
@inject JsonDataSerializer _jsonDataSerializer;
@inject ChatService _chatService;
@inject ModelCallerService _modelCallerService;
@inject S4HBIService _S4HBIService;
@inject IHttpContextAccessor _httpContextAccessor;

<body>
  <div class="container">
    <div class="row">


      <section class="discussions">
        <div class="discussion search">

        </div>


        <div>
            <button id="CreateNewChat" @onclick="OnCreateNewChatClick"  >create New Chat</button>
        </div>

        @if(chats!= null){
            @foreach (var item in chats)
            {
                <div class="discussion message-active" @onclick="( async () => { await OnClickChangeChat(item);} )">
                    <div class="desc-contact">

                        <p class="name"> Session : @item.Name</p>
                    </div>
                    <div class="timer"> Date : @DateTime.Now.ToString("yyyy.MM.dd") </div>
                </div>
            }
        }



      </section>
            <section class="chat" style="padding: 0px 0px;">
@* 
                <div class="alert alert-primary" style="background-color: #dee5f5; border-color: #60728b; text-align: center;     margin: 0 2.3em;">
                    <p style="font-size: 24px;">
                     
                        @switch (chatHistory.BotType)
                        {
                            case 1:
                                <span>Informacja o pomocy kryzysowej</span>
                                break;
                            case 2:
                                <span>Informacja dotyczjąca bezrobocia</span>
                                break;
                            case 3:
                                <span>Raport 2022 o zatrudnieniu cudzoziemców</span>
                                break;
                            case 4:
                                <span>Zatrudnienie niepełnosprawnych w 2022 roku.</span>
                                break;
                            case 5:
                                <span>Ilość zarejestrowanych miejsc pracy w 2022 roku.</span>
                                break;
                            case 6:
                                <span>Rozkład wieku bezrobotnych w 2022 roku.</span>
                                break;
                            default:
                                <span>Bot nie został wybrany</span>
                                break;
                        }
                    </p>
                </div> *@


                 <div class="messages-chat" style="margin-bottom: 3em; padding: 0px 0px;">


@*                     @if (chatHistory.Messages.Count == 0 && selectedBot == null)
                    {
                        <div class="message, text">
                            <p>Prosze wybrać bota, z którym mozna prowadzić rozmowe na temat finansowy albo statystyczny: </p>
                            <p style="margin-bottom: -0.0em;">Prosze wybrać bota, z którym mozna prowadzić rozmowe na temat finansowy albo statystyczny: </p>
                            <p style ="margin-bottom: -0.0em;">Informacja o pomocy kryzysowej </p>
                            <button style="border-radius: 10px 10px 10px 10px; margin-bottom: 0.6em;" id="chatSubmit" @onclick="( async () => { await OnClickChangeBotType(1);} )">Wybierz</button>
                            <p style="margin-bottom: -0.0em;">Informacja dotyczjąca bezrobocia </p>
                            <button style="border-radius: 10px 10px 10px 10px; margin-bottom: 0.6em;" id="chatSubmit" @onclick="( async () => { await OnClickChangeBotType(2);} )">Wybierz</button>
                            <p style="margin-bottom: -0.0em;">Raport 2022 o zatrudnieniu cudzoziemców</p>
                            <button style="border-radius: 10px 10px 10px 10px; margin-bottom: 0.6em;" id="chatSubmit" @onclick="( async () => { await OnClickChangeBotType(3);} )">Wybierz</button>
                            <p style="margin-bottom: -0.0em;">Zatrudnienie niepełnosprawnych w 2022 roku. </p>
                            <button style="border-radius: 10px 10px 10px 10px; margin-bottom: 0.6em;" id="chatSubmit" @onclick="( async () => { await OnClickChangeBotType(4);} )">Wybierz</button>
                            <p style="margin-bottom: -0.0em;">Ilość zarejestrowanych miejsc pracy w 2022 roku. </p>
                            <button style="border-radius: 10px 10px 10px 10px; margin-bottom: 0.6em;" id="chatSubmit" @onclick="( async () => { await OnClickChangeBotType(5);} )">Wybierz</button>
                            <p style="margin-bottom: -0.0em;">Rozkład wieku bezrobotnych w 2022 roku. </p>
                            <button style="border-radius: 10px 10px 10px 10px; margin-bottom: 0.6em;" id="chatSubmit" @onclick="( async () => { await OnClickChangeBotType(6);} )">Wybierz</button>
                            
                            
                        </div> 
                    } *@
@*                     else
                    {
                        <p>Wybrany zostal bot </p>
                    } *@

            @foreach (var message in chatHistory.Messages)
            {
                @if (message.IsRequest)
                {
                    <div class="message" >
                        <p class="text">@message.Text</p>
                    </div>
                }
                else
                {
                    <div class="message text-only " >
                        <div class="response">
                            <p class="text">@message.Text</p>
                        </div>
                    </div>
                }

            }

        </div>
                <div class="footer-chat" style="background-color: #fff;">
          <input id="textImput" type="text" class="write-message" placeholder="Type your message here" @bind="text"/>

          @if(submitDisabled){
            <button id="chatSubmit" style="background-color:gray" >
                Oczekiwanie odpowiedzi Ai
            </button>
          }
          else
          {
            <button id="chatSubmit" @onclick="Submit">
                Submit
            </button>
          }






            <button id="VoiceRecord" @onclick="VoiceRecord">
                @sounrRecordError
            </button>
        </div>
      </section>
    </div>
  </div>
</body>


@code {
    bool submitDisabled;

    string sounrRecordError = "Nagranie Głosu";
    int? selectedBot;
    Chat currentConversation;
    bool firstRender;
    private string text = "";
    List<Chat> chats;
    ChatHistory chatHistory; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            submitDisabled = false;
            chatHistory = new ChatHistory(null, new List<Message>());

            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP.Equals("::1"))
                clientIP = "localhost";
            chats = _chatService.GetUserChatList(clientIP);

            if (chats.Count > 0)
            {
                Chat defaultChat = chats.First();

                currentConversation = defaultChat;
                chatHistory = _chatService.GetChatHistory(clientIP, defaultChat);
            }
            else
            {
                OnCreateNewChatClick();
            }

            StateHasChanged();

        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task OnClickChangeBotType(int idOfDataFile)
    {
        try
        {
            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP.Equals("::1"))
                clientIP = "localhost";

            selectedBot = idOfDataFile;
            chatHistory = _chatService.GetChatHistory(clientIP, currentConversation);

            if(chatHistory.BotType == null)
            {
                chatHistory.BotType = selectedBot;
            }

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task OnClickChangeChat(Chat chat)
    {
        try
        {
            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP.Equals("::1"))
                clientIP = "localhost";

            chatHistory = _chatService.GetChatHistory(clientIP, chat);

            currentConversation = chat;
            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    /// <summary>
    /// Create chat
    /// </summary>
    public async void OnCreateNewChatClick()
    {
        try
        {
            Guid guid = Guid.NewGuid();
            Chat Newchat = new Chat(guid.ToString(), DateOnly.FromDateTime(DateTime.Now.Date));
            string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
            if (clientIP == null)
                return;

            // await OnClickChangeChat(Newchat);

            selectedBot = null;

            // create Chat
            await _chatService.CreateNewChat(clientIP);

            // REfresz chat list
            chats = _chatService.GetUserChatList(clientIP);
            StateHasChanged();
        }
        catch(Exception ex)
        {

        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        try
        {


            // execute conditionally for loading data, otherwise this will load
            // every time the page refreshes
            if (firstRender)
            {

                string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
                if (clientIP == null)
                    return;
                if (clientIP.Equals("::1"))
                    clientIP = "localhost";
                chats = _chatService.GetUserChatList(clientIP);

                // Do work to load page data and set properties
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {

        }

    }

    private async Task Submit()
    {
        submitDisabled = true;
        StateHasChanged();

        string? clientIP = _httpContextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString();
        if (clientIP == null)
            clientIP = "undefinded";


        Message message = new Message(DateTime.Now, text, true);
        //bool humanResponseSaveResult = _jsonDataSerializer.SerializeToJson(clientIP, currentConversation, message, selectedBot.Value);
        chatHistory.Messages.Add(message);


        string s4HContextData = await _S4HBIService.GetS4HContextData();

        string resonse = await _modelCallerService.AskModel(clientIP, text, s4HContextData);
        Message botResponseMessage = new Message(DateTime.Now, resonse, false);
        //bool botResponseSaveResult = _jsonDataSerializer.SerializeToJson(clientIP, currentConversation, botResponseMessage, selectedBot.Value);
        chatHistory.Messages.Add(botResponseMessage);

        submitDisabled = false;
        StateHasChanged();
    }

    public void VoiceRecord()
    {
        sounrRecordError = "Nie działa nagrywanie Głosa";
        
    }

    

}